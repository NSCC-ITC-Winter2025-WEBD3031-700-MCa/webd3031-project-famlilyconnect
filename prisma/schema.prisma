// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum Role {
  admin
  editor
  viewer
}

enum Status {
  pending
  completed
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL") // Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  accounts              Account[]
  sessions              Session[]
  role                  String? @default("user")
  familyMembers FamilyMember[]
  posts         Post[]
  events        Event[]        @relation("UserEvents")
  photos        Photo[]

  mainFamilyId String?
  mainFamily   Family?      @relation("MainFamily", fields: [mainFamilyId], references: [id])
  Invitation   Invitation[]
}

model FamilyMember {
  id           String  @id @default(cuid())
  userId       String
  familyId     String
  role         Role    @default(viewer)
  isMainFamily Boolean @default(false)
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  family       Family  @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@unique([userId, familyId])
}

model Family {
  id      String         @id @default(cuid())
  name    String
  members FamilyMember[]
  posts   Post[]
  events  Event[]
  photos  Photo[]

  mainUsers  User[]       @relation("MainFamily")
  Invitation Invitation[]
}

model Post {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  familyId  String
  createdAt DateTime @default(now())

  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model Event {
  id         String   @id @default(cuid())
  title      String
  status     Status   @default(pending)
  assignedTo String?
  familyId   String
  createdAt  DateTime @default(now())

  family Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  user   User?  @relation("UserEvents", fields: [assignedTo], references: [id])
}

model Photo {
  id         String   @id @default(cuid())
  url        String
  uploaderId String
  familyId   String
  createdAt  DateTime @default(now())

  uploader User   @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Invitation {
  id         String   @id @default(cuid())
  email      String
  inviteCode String   @unique
  status     Status   @default(pending)
  familyId   String
  invitedBy  String
  createdAt  DateTime @default(now())
  expiresAt  DateTime

  family  Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  inviter User   @relation(fields: [invitedBy], references: [id], onDelete: Cascade)

  @@unique([email, familyId])
}
